'use strict';

/**
 * We are not using the built-in url module, because when it parse
 * an url, it escapes some characters like quoutes and asteriks, but we need the url
 * to be forwarded as it came to us.
 */
const _ = require('lodash');
const urijs = require('urijs');
const url = require('url');
const queryString = require('query-string');

module.exports = {
  parse: function (urlString) {
    const parsedUri = urijs.parse(urlString);

    const resultUrl = {
      protocol: parsedUri.protocol ? parsedUri.protocol + ':' : null,
      hostname: parsedUri.hostname || null,
      host: buildHost(parsedUri),
      port: parsedUri.port ? parsedUri.port : null,
      pathname: parsedUri.path,
      slashes: true,
      auth: buildUserInfo(parsedUri),
      search: parsedUri.query ? ('?' + parsedUri.query) : null,
      query: parsedUri.query ? parsedUri.query : null,
      hash: parsedUri.fragment ? ('#' + parsedUri.fragment) : null
    };

    resultUrl.path = resultUrl.pathname + (resultUrl.search || '');

    resultUrl.href = resultUrl.protocol ? (resultUrl.protocol + '//') : '';
    resultUrl.href += resultUrl.auth ? (resultUrl.auth + '@') : '';
    resultUrl.href += resultUrl.host ? resultUrl.host : '';
    resultUrl.href += resultUrl.path;
    resultUrl.href += resultUrl.hash ? resultUrl.hash : '';

    return resultUrl;
  },

  buildAppRouterUrl: function (req) {
    const reqHeaders = req.headers;
    const forwardedProtocol = reqHeaders['x-forwarded-proto'];
    const host = getRedirectHost(req);

    if (forwardedProtocol) {
      return forwardedProtocol + '://' + host;
    }

    const hostHeaderParts = host.split(':');
    if (hostHeaderParts.length === 2) {
      const port = hostHeaderParts[1];
      if (port === '443') {
        return 'https://' + host;
      }
      if (port === '80') {
        return 'http://' + host;
      }
    }
    return req.protocol + '://' + host;
  },

  getQueryParam: function (req, paramName) {
    let params = req && req.url && (url.parse(req.url, true)).query;
    return params && params[paramName];
  },

  removeQueryParam: function (req, paramName) {
    if (req && req.url) {
      let parsedUrl = queryString.parseUrl(req.url, {parseFragmentIdentifier: true});
      let params = new URLSearchParams(queryString.stringify(parsedUrl.query));
      if (params) {
        params.delete(paramName);
        parsedUrl.query = queryString.parse(params.toString());
        return  queryString.stringifyUrl(parsedUrl);
      }
      return req.url;
    }
    return null;
  },

  getAppRouterHost: getAppRouterHost,
  getRedirectHost: getRedirectHost,
  addUUIDDashes: addUUIDDashes,

  join: function (url, path) {
    return _.trimEnd(url, '/') + '/' + _.trimStart(path, '/');
  }
};

function getRedirectHost(req) {
  const reqHeaders = req.headers;
  return reqHeaders['x-forwarded-host'] || reqHeaders.host;
}

function getAppRouterHost(req) {
  const reqHeaders = req.headers;
  const extReverseProxy = process.env.EXTERNAL_REVERSE_PROXY && (process.env.EXTERNAL_REVERSE_PROXY === 'true' || process.env.EXTERNAL_REVERSE_PROXY === true);
  if (extReverseProxy){
    return reqHeaders['x-custom-host'] ||  reqHeaders.host;
  }
  return reqHeaders['x-forwarded-host'] ||  reqHeaders.host;
}

function buildHost(parsedUri) {
  let host = parsedUri.hostname ? parsedUri.hostname : null;
  if (host && parsedUri.port) {
    host += ':' + parsedUri.port;
  }
  return host;
}

function buildUserInfo(parsedUri) {
  let res = '';
  if (typeof parsedUri.username === 'string') {
    res = parsedUri.username;
  }
  if (typeof parsedUri.password === 'string') {
    res += ':' + parsedUri.password;
  }
  return res || null;
}

function addUUIDDashes(uuid){
  if (uuid.indexOf('-') < 0){
    uuid = uuid.substr(0,8) + '-' + uuid.substr(8,4) + '-' + uuid.substr(12,4) + '-' + uuid.substr(16,4) + '-' + uuid.substr(20);
  }
  return uuid;
}